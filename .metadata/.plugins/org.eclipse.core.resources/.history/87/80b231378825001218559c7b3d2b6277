(ns clojure-learning.object1)

(defn Point
  [x y]
  {:x x 
   :y y
   :__class_symbol__ 'Point})

(def x :x)
(def y :y)
(def class-of :__class_symbol__)

(defn shift
  [this xinc yinc]
  (Point (+ (x this) xinc)
         (+ (y this) yinc)))

(defn add
  [first second]
  (Point (+ (x first) (x second))
         (+ (y first) (y second))))  

(defn add-with-shift
  [f s]
  (shift f (x s) (y s)))

(defn Triangle
  [p1 p2 p3]
  {:p1 p1, :p2 p2, :p3 p3, :__class_symbol__ 'Triangle})

(defn make 
  [type & args]
  (apply type args))

(defn equal-triangles?
  [t1 t2]
  (= t1 t2))

(let [t1 (make Triangle (make Point 1 2) (make Point 3 4)(make Point 5 6))
      t2 (make Triangle (make Point 1 2) (make Point 3 4)(make Point 5 6))]
  (equal-triangles? t1 t2)
  ;(make Point 2 3)
  ;(println p1)
  ;(println (shift p1 1 2))
  ;(println (add p1 p2))
  ;(println (add-with-shift p1 p2))
  )
  
  
  
  