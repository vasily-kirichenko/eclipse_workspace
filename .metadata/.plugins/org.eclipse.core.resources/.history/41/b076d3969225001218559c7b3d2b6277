(ns clojure-learning.object1)

(def Point
{
   :__own_symbol__ 'Point
   :__instance_methods__ 
   {
     :add-intstance-values (fn [this x y] (assoc this :x x :y y))
     
     :shift (fn [this xinc yinc]
              (make Point 
                    (+ (send-to this :x) xinc)
                    (+ (send-to this :y) yinc)))
                 :x :x
                 :y :y
                 
     :add (fn [this another]
            (send-to this :shift
                     (send-to another :x)
                     (send-to another :y)))  
    }
})

(defn apply-message-to
  [class instance message args]
  (apply (message (:__instance_methods__ class)) args))

(defn make 
  [class & args]
  (let [seeded {:__class_symbol__ (:__own_symbol__ class)}
        constructor (apply-message-to class seeded :add-intstance-values (:__instance_methods__ class))]
    (apply-message-to class 
  (apply constructor seeded args)))

(defn send-to
  [instance message & args]
  (let [class (eval (:__class_symbol__ instance))
        method (message (:__instance_methods__ class))]
  (apply method instance args)))

(let [p1 (make Point 1 2)]
  ;((:shift (:__methods__ p1)) p1 10 20)
  ;(send-to p1 :shift 100 200)
  ;(send-to p1 :x)
  (send-to p1 :add (make Point 10 20))
  ;(equal-triangles? t1 t2)
  ;(make Point 2 3)
  ;(println p1)
  ;(println (shift p1 1 2))
  ;(println (add p1 p2))
  ;(println (add-with-shift p1 p2))
  )
  
  
  
  