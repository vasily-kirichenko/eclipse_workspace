(ns cl.zippers
  (:require [clojure.zip :as zip]))

(def zipper (zip/seq-zip '(1 (2 3) 4)))

(defn flattenize
  [tree]
  (letfn [(flatten-zipper [so-far zipper]
                         (cond (zip/end? zipper)
                               so-far

                               (zip/branch? zipper)
                               (flatten-zipper so-far (zip/next zipper))
                               
                               :else
                               (flatten-zipper (cons (zip/node zipper) so-far)
                                               (zip/next zipper))))]
         (reverse (flatten-zipper '() (zip/seq-zip tree)))))

(flattenize '(1 (2 (3 4)) 5))


